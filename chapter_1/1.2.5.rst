1.2.5 最大公約数
====================

2 つの整数 a と b の最大公約数(GCD)を効率的に見つけるアルゴリズムを考える.
a を b で割った剰余を r とすると, 公約数は b と r の公約数と同じという考えに基づいて以下の式が定義できる.

.. sourcecode:: scheme

   (define (gcd a b)
     (if (= b 0)
          a
          (gcd b (remainder a b))))

ステップ数は対数的に増加する.

==============================================
Euclid のアルゴリズム (Euclid's Algorithm)
==============================================

最大公約数を求める gcd 手続きは以下の Euclid のアルゴリズムにもとづいて定義できる.

**Euclid のアルゴリズム (Euclid's Algorithm)**

   a, b を 2 つの自然数とする.
   a と b の最大公約数を GCD(a,b) と表す.
   この時 a > b ならば GCD(a,b) = GCD(a-b, b) が成り立つ

**証明**

   A を B で割った商が q, 余り r の時, A = Bq + r　…(1)
   A と B の最大公約数を G とすると, A = Ga, B = Gb（a, bは互いに素）
   (1)式に代入すると
   
   Ga = Gbq + r
   G(a - bq) = r

   ここから G は r の約数であることがわかる.
   ここで, r = Grとおく.

   代入して G で割ると

   a = bq + r

   ここで b と r に公約数 G' が存在することがわかるので b = G'c, r = G's とおく.
   すると, a = G'(cq + s) となり G' は a の約数になる.
   これは a と b が互いに素であることに反するので G は B, r の最大公約数である.

   以上のことから, A = Bq + r のとき, A, B の最大公約数は B, r の最大公約数である.
